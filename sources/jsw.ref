; Copyright 2012-2022 Richard Dymond (rjdymond@gmail.com)

[Config]
Expand=#INCLUDE(Expand)
HtmlWriterClass=:jetsetwilly.JetSetWillyHtmlWriter
RefFiles=bugs.ref;changelog.ref;facts.ref;glossary.ref;pokes.ref
GameDir=jet_set_willy

[Game]
Game=Jet Set Willy
Logo=#LOGO0,0(logo)
StyleSheet=skoolkit.css;jsw.css
Copyright=&#169; 1984 Software Projects Ltd. &#169; 2020 Richard Dymond.
Release=The complete Jet Set Willy RAM disassembly 20200806
LinkInternalOperands=1
AddressAnchor={address#IF({base}==16)(:04x)}

[PageHeaders]
Asm-t=Messages

[Index:DataTables:Data tables and buffers]
GameStatusBuffer
Rooms
Items
Entity definitions
Codes

[Index:Reference:Reference]
Changelog
Glossary
Facts
Bugs
Pokes
Credits

[Paths]
Credits=reference/credits.html
Rooms=tables/rooms.html
Codes=tables/codes.html
CodeFiles={address#IF({base}==16)(:04#S/X/)}.html

[MemoryMap:MemoryMap]
PageByteColumns=#IF({base}==16)(0,1)

[MemoryMap:DataMap]
PageByteColumns=#IF({base}==16)(0,1)

[MemoryMap:UnusedMap]
Intro=#INCLUDE1(UnusedMapIntro)
PageByteColumns=#IF({base}==16)(0,1)

[UnusedMapIntro]
In addition to the entries in the table below, the following embedded sections
of code and data are unused:

#LIST
{ The entries at #R33622(#N33622-#N33663) and #R33750(#N33750-#N33791) in the
  rope animation table (84 bytes) }
{ The section of code at #R35345(#N35345-#N35365) in the main loop (21 bytes) }
{ Entity definition #b43 at #R41304 (8 bytes) }
{ Entity definition #b63 at #R41464 (8 bytes) }
{ Entity definitions #b112-#b126 at #R41856 (120 bytes) }
{ Slots #b0-#b172 at #R41984#41984 and #R42240 in the item table (346 bytes) }
{ Pages #R45312(#b177) and #R45824(#b179) in the guardian graphic data (512
  bytes) }
{ Room #R61184(#b47) (256 bytes) }
LIST#

[Page:Rooms]
PageContent=#INCLUDE(Rooms)

[Rooms]
#TABLE(default,centre,centre,,centre)
{ =h No. | =h Address | =h Name | =h Teleport }
#FOR(0,60)(rnum,
  #LET(addr=49152+rnum*256)
  #LET(name$=#STR({addr}+128,7,32))
  #LET(tcode=#FOR(1,6)(key,#IF(rnum&(1<<(key-1)))(key))9)
  { #N(rnum,,,1)(0x) | #N({addr}) | #FORMAT(#R({addr})({name$}) | {tcode}) }
)
TABLE#

[Page:Items]
Content=asm/#N41984.html

[Page:Entity definitions]
Content=asm/#N40960.html

[Page:Codes]
PageContent=#INCLUDE(Codes)

[Codes]
#TABLE(default,centre,centre,centre,centre)
{ =h Address | =h Value | =h Grid | =h Code }
#FOR(40448,40626)(addr,
  #LET(gridloc$=#CHR(65+(addr&255)%18,1)#CHR(48+(addr&255)/18,1))
  #LET(v=#PEEKaddr+addr%256)
  #LET(code=#FOR(6,0,-2)(q,#EVAL((({v}>>q)&3)+1)))
  { #Naddr | #N(#PEEKaddr,,,1)(0x) | #FORMAT({gridloc$} | {code}) }
)
TABLE#

[Page:Credits]
PageContent=#INCLUDE(Credits)

[Credits]
<div class="box box-1">
This disassembly would have taken a lot longer to finish if it weren't for the
research and documentation already done and made available by:
#LIST
{ <a href="https://www.oocities.org/andrewbroad/spectrum/willy/">Andrew
  Broad</a> (and Carl Woffenden) }
{ <a href="http://mdfs.net/Software/JSW/Docs/">J. G. Harston</a> }
LIST#
In particular, their partial disassemblies, bug descriptions and room format
descriptions were of great help.
</div>

[Expand]
#DEF(#REM()(remark))

#DEF(#TILE(addr)(frame)
  #UDG($addr+1,#PEEK$addr)(*$frame)
)

#DEF(#SFRAME(addr,attr)(frame)
  #UDGARRAY(2,$attr,,2);$addr-($addr+17)-1-16(*$frame)
)

#DEF(#BTILEADDR(addr,attr)
  #LET(ta=$addr+160)
  #WHILE(#PEEK({ta})!=$attr)(#LET(ta={ta}+1))
  #EVAL({ta})
)

#DEF(#ITEMS(addr,x,y)(frame)
  #LET(rnum=($addr-49152)/256)
  #LET(ink=3)
  #UDG($addr+225)(*item)
  #FOR(41984+#PEEK41983,42239)(q,
    #LET(b1=#PEEKq)
    #IF({b1}&63=={rnum})(
      #LET(b2=#PEEK(q+256))
      #LET(x=({b2}&31)-$x)
      #LET(y=8*({b1}>>7)+{b2}/32-$y)
      #OVER({x},{y},,,3)({ink}+($b&248))($f)($frame,item)
      #LET(ink={ink}+1)
      #IF({ink}==7)(#LET(ink=3))
    )
  )
)

#DEF(#ARROW(addr,start,x,y)(frame)
  #LET(dfaddr=#PEEK($start+33280)+256*(#PEEK($start+33281)-32))
  #IF(16384<={dfaddr}<20480)(
    #LET(py=64*(({dfaddr}-16384)/2048)+({dfaddr}%256)/4-$y*8)
    #LET(ydelta=({dfaddr}/256)&7)
    #LET(x=#PEEK($addr+4)&31-$x)
    #POKES(8,0,8)
    #POKES(8+{ydelta}-1,#PEEK($addr+6),2,2)
    #POKES(8+{ydelta},255)
    #UDG(8,7)(*arrow)
    #OVER({x},0,0,{py},1)($b&56|$f&71)($frame,arrow)
  )
)

#DEF(#ROPE(addr,start,x,y)(frame)
  #LET(length=#PEEK($addr+4))
  #UDGARRAY1;0x(({length}*3)/8+1)(*rope)
  #FOR(0,{length})(y,#PLOT(0,y*3)(rope))
  #OVER(($start&31)-$x,-$y,0,0)($frame,rope)
)

#DEF(#OGUARDIAN(addr,start,x,y)(frame)
  #LET(b=#PEEK($addr+1))
  #LET(saddr=($start&224)+256*#PEEK($addr+5))
  #SFRAME({saddr},8*({b}&8)+({b}&7))(guardian)
  #LET(x=($start&31)-$x)
  #LET(py=#PEEK($addr+3)/2-$y*8)
  #OVER({x},0,0,{py},1)($b&56|$f&71)($frame,guardian)
)

#DEF(#GUARDIANS(addr,x,y)(frame)
  #LET(done=0)
  #FOR($addr+240,$addr+254,2)(z,
    #LET(num=#PEEKz)
    #IF({num}==255)(#LET(done=1))
    #IF({done}==0)(
      #LET(start=#PEEK(z+1))
      #LET(defaddr=40960+{num}*8)
      #LET(gtype=#PEEK({defaddr})&7)
      #IF(0<{gtype}&3<3)(#OGUARDIAN({defaddr},{start},$x,$y)($frame))
      #IF({gtype}&3==3)(#ROPE({defaddr},{start},$x,$y)($frame))
      #IF({gtype}==4)(#ARROW({defaddr},{start},$x,$y)($frame))
    )
  )
  #IF($addr==57600)(
    #SFRAME(42496,7)(toilet)
    #OVER(28,13,,,1)($b&56|$f&71)($frame,toilet)
  )
  #IF($addr==58112)(
    #UDGARRAY(2,7,,2)(40064,69;40065,69;40080;40081)(*maria)
    #OVER(14,11,,,1)($b&56|$f&71)($frame,maria)
  )
)

#DEF(#ANIMCONV(addr,x,y,fix)(frame)
  #LET(dir=#PEEK($addr+214))
  #LET(pos=#PEEK($addr+215)+256*#PEEK($addr+216)-24064)
  #LET(length=#PEEK($addr+217))
  #LET(x={pos}%32-$x)
  #LET(y={pos}/32-$y)
  #PUSHS
  #LET(cta=#IF($fix)($addr+205,#BTILEADDR($addr,#PEEK($addr+205))))
  #LET(orig=#PEEK({cta}+1)+256*#PEEK({cta}+3))
  #LET(done=0)
  #LET(lf=0)
  #FOR(0,2)(q,
    #IF({done}==0)(
      #IF({dir}==1)(
        #POKES({cta}+1,(#PEEK({cta}+1)>>2)+(#PEEK({cta}+1)&3)*64)
        #POKES({cta}+3,((#PEEK({cta}+3)<<2)&255)+(#PEEK({cta}+3)>>6))
      )
      #IF({dir}==0)(
        #POKES({cta}+1,((#PEEK({cta}+1)<<2)&255)+(#PEEK({cta}+1)>>6))
        #POKES({cta}+3,(#PEEK({cta}+3)>>2)+(#PEEK({cta}+3)&3)*64)
      )
      #LET(done={orig}==#PEEK({cta}+1)+256*#PEEK({cta}+3))
      #IF({done}==0)(
        #TILE({cta})(ctile)
        #COPY($frame,$frame-q)
        #FOR({x},{x}+{length}-1)(z,
          #OVER(z,{y},,,2)($f)($frame-q,ctile)
        )
        #LET(lf=q)
      )
    )
  )
  #POPS
)

#DEF(#ROOM(num,scale=2,x=0,y=0,w=32,h=17,flags=1)(fname)
  #REM(
    num: room number (0-60)
    scale: image scale
    x, y, w, h: geometry of frame
    flags:
      1 - show items and guardians
      2 - animate conveyor
      4 - rebuild empty room (in case room definition has been modified)
      8 - fix tile bug that affects conveyors and nasties (implies rebuild)
  )
  #IF($flags&12)||
    #RFRAME($num,1,$flags&8)(temp)
    #COPY($x,$y,$w,$h,$scale)(temp,room)
  |
    #RFRAME($num)
    #COPY($x,$y,$w,$h,$scale)($num,room)
  ||
  #LET(addr=49152+256*$num)
  #IF($flags&1)(
    #ITEMS({addr},$x,$y)(room)
    #GUARDIANS({addr},$x,$y)(room)
  )
  #IF($flags&2)||
    #ANIMCONV({addr},$x,$y,$flags&8)(room)
    #UDGARRAY#(*room,10#FOR(0,{lf})(n,;room-n))({ScreenshotImagePath}/$fname)
  |
    #UDGARRAY*room({ScreenshotImagePath}/$fname)
  ||
)

#DEF(#WILLY(rnum,x,y,sprite,left=0,top=0,width=32,height=17,force=0)(fname)
  #REM(
    rnum: room number (0-60)
    x, y: Willy's location in room
    sprite: Willy's sprite index (0-7)
    left, top, width, height: geometry of frame
    force: rebuild empty room (in case room definition has been modified)
  )
  #IF($force)||
    #RFRAME($rnum,1)(temp)
    #COPY($left,$top,$width,$height)(temp,room)
  |
    #RFRAME($rnum)
    #COPY($left,$top,$width,$height)($rnum,room)
  ||
  #LET(addr=49152+256*$rnum)
  #SFRAME(40192+32*$sprite,7)(willy)
  #LET(bg=#PEEK({addr}+160))
  #OVER($x-$left,0,0,$y-8*$top,1)(#IF($b=={bg})($b&56|$f&71,$b))(room,willy)
  #UDGARRAY*room({ScreenshotImagePath}/$fname)
)

#DEF(#GAMEOVER
  #FOR(255,63,-4,7)(e,[13*e+33]*63,13*e+13227+10*#EVAL(135<=e<=163))
)

[ThemeTune]
 [[[3246]*3, [3288, [3246]*2]*5, 3288]*4, [3246]*3, [3288, [3246]*2]*6, [3288,
 [3246]*3, [3288, [3246]*2]*5]*3, 3288, [3246]*3, 3288, [3246]*2, 3291, [6486,
 [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2,
 [6486, 6528, [6486, [6528]*2]*3]*2, 6486, 6528, [6486, [6528]*2]*2, 6486,
 6528, [6486, [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, 6486,
 356, [[2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3,
 2448]*2, [2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3,
 [2448, [2406]*4, [2448, [2406]*3]*2]*2, 2451, 4806, [4848, [4806]*2, [4848,
 4806]*7, 4848, [4806]*2, [4848, 4806]*6]*3, 4848, [4806]*2, [4848, 4806]*2,
 3842, [[2046]*4, 2088]*50, [2046]*4, 2091, 2046, [[4086]*2, 4128, 4086,
 4128]*24, [4086]*2, 2156]*7, [[3246]*3, [3288, [3246]*2]*5, 3288]*4, [3246]*3,
 [3288, [3246]*2]*6, [3288, [3246]*3, [3288, [3246]*2]*5]*3, 3288, [3246]*3,
 3288, [3246]*2, 3291, [6486, [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3,
 6486, 6528, [6486, [6528]*2]*2, [6486, 6528, [6486, [6528]*2]*3]*2, 6486,
 6528, [6486, [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3, 6486, 6528, [6486,
 [6528]*2]*2, 6486, 6528, 6486, 356, [[2406]*4, [2448, [2406]*3]*2, [2448,
 [2406]*4, [2448, [2406]*3]*3]*3, 2448]*2, [[2406]*4, [2448, [2406]*3]*2,
 [2448, [2406]*4, [2448, [2406]*3]*3]*3, [2448, [2406]*4, [2448,
 [2406]*3]*2]*2, 2451, 4806, [4848, [4806]*2, [4848, 4806]*7, 4848, [4806]*2,
 [4848, 4806]*6]*3, 4848, [4806]*2, [4848, 4806]*2, 3842, [[2046]*4, 2088]*50,
 [2046]*4, 2091, 2046, [[4086]*2, 4128, 4086, 4128]*24, [4086]*2, 2156,
 [[3046]*3, 3088, [3046]*2, [3088, [3046]*3, [3088, [3046]*2]*2]*2, 3088,
 [3046]*3, 3088, [3046]*2, [3088, [3046]*3, [3088, [3046]*2]*2]*3, 3088]*2,
 [3046]*3, 3088, [3046]*2, [3088, [3046]*3, [3088, [3046]*2]*2]*2, 3088,
 [3046]*3, 3088, [3046]*2, 3088, [3046]*3, [3088, [3046]*2]*2, 3091, [6086,
 6128, 6086, [6128]*2]*2, [[6086, 6128]*2, [6086, [6128]*2, 6086, 6128]*5,
 6086, [6128]*2]*2, [6086, 6128]*2, 6086, [6128]*2, 6086, 5162, [[2406]*3,
 2448]*3, [[2406]*4, [2448, [2406]*3]*3, 2448]*3, [2406]*4, [2448, [2406]*3]*2,
 [2448, [2406]*4, [2448, [2406]*3]*3]*3, 2448]*2, [2406]*4, [2448, [2406]*3]*2,
 [2448, [2406]*4, [2448, [2406]*3]*3]*3, [2448, [2406]*4, [2448,
 [2406]*3]*2]*2, 2451, 4806, [4848, [4806]*2, [4848, 4806]*7, 4848, [4806]*2,
 [4848, 4806]*6]*3, 4848, [4806]*2, [4848, 4806]*2, 3842, [[2046]*4, 2088]*50,
 [2046]*4, 2091, 2046, [[4086]*2, 4128, 4086, 4128]*24, [4086]*2, 2156,
 [[[3046]*3, 3088, [3046]*2, [3088, [3046]*3, [3088, [3046]*2]*2]*2, 3088,
 [3046]*3, 3088, [3046]*2, [3088, [3046]*3, [3088, [3046]*2]*2]*3, 3088]*2,
 [3046]*3, 3088, [3046]*2, [3088, [3046]*3, [3088, [3046]*2]*2]*2, 3088,
 [3046]*3, 3088, [3046]*2, 3088, [3046]*3, [3088, [3046]*2]*2, 3091, [6086,
 6128, 6086, [6128]*2]*2, [[6086, 6128]*2, [6086, [6128]*2, 6086, 6128]*5,
 6086, [6128]*2]*2, [6086, 6128]*2, 6086, [6128]*2, 6086, 5042, [[2286]*3,
 2328]*2, [[2286]*4, 2328, [2286]*3, 2328]*24, [2286]*4, 2331, 4566, 4608,
 [4566]*2, [4608, 4566]*4, [4608, [4566]*2, [4608, 4566]*3]*10, 4608, [4566]*2,
 [4608, 4566]*2, 2756, [[1806]*5, 1848]*3, [[1806]*4, [1848, [1806]*5]*2,
 1848]*3, [[1806]*4, [1848, [1806]*5]*3, [1848, [1806]*4, [1848,
 [1806]*5]*2]*4, 1848]*2, [1806]*4, [1848, [1806]*5]*3, 1848, [1806]*4, [1848,
 [1806]*5]*2, 1851, [[3606]*2, 3648]*3, 3606, [3648, [3606]*2]*6, [3648, 3606,
 [3648, [3606]*2]*5]*2, [3648, 3606, [3648, [3606]*2]*6, 3648, 3606, [3648,
 [3606]*2]*5]*2, 3648, 3606, 3596]*2, [[3246]*3, [3288, [3246]*2]*5, 3288]*4,
 [3246]*3, [3288, [3246]*2]*6, [3288, [3246]*3, [3288, [3246]*2]*5]*3, 3288,
 [3246]*3, 3288, [3246]*2, 3291, [6486, [6528]*2]*2, 6486, 6528, [6486,
 [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, [6486, 6528, [6486,
 [6528]*2]*3]*2, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, [6486,
 [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, 6486, 356, [[2566]*3,
 2608]*50, [2566]*3, 2611, 2566, [5126, 5168]*48, 5126, 4562, [[1806]*4, [1848,
 [1806]*5]*2, 1848]*4, [[1806]*4, [1848, [1806]*5]*3, [1848, [1806]*4, [1848,
 [1806]*5]*2]*4, 1848]*2, [1806]*4, [1848, [1806]*5]*3, 1848, [1806]*4, [1848,
 [1806]*5]*2, 1851, [[3606]*2, 3648]*3, 3606, [3648, [3606]*2]*6, [3648, 3606,
 [3648, [3606]*2]*5]*2, [3648, 3606, [3648, [3606]*2]*6, 3648, 3606, [3648,
 [3606]*2]*5]*2, 3648, 3606, 3596, [[3246]*3, [3288, [3246]*2]*5, 3288]*4,
 [3246]*3, [3288, [3246]*2]*6, [3288, [3246]*3, [3288, [3246]*2]*5]*3, 3288,
 [3246]*3, 3288, [3246]*2, 3291, [6486, [6528]*2]*2, 6486, 6528, [6486,
 [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, [6486, 6528, [6486,
 [6528]*2]*3]*2, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, [6486,
 [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, 6486, 356, [[2406]*4,
 [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3, 2448]*2, [2406]*4,
 [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3, [2448, [2406]*4,
 [2448, [2406]*3]*2]*2, 2451, 4806, [4848, [4806]*2, [4848, 4806]*7, 4848,
 [4806]*2, [4848, 4806]*6]*3, 4848, [4806]*2, [4848, 4806]*2, 3842, [[2046]*4,
 2088]*50, [2046]*4, 2091, 2046, [[4086]*2, 4128, 4086, 4128]*24, [4086]*2,
 2156, [[3246]*3, [3288, [3246]*2]*5, 3288]*4, [3246]*3, [3288, [3246]*2]*6,
 [3288, [3246]*3, [3288, [3246]*2]*5]*3, 3288, [3246]*3, 3288, [3246]*2, 3291,
 [6486, [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3, 6486, 6528, [6486,
 [6528]*2]*2, [6486, 6528, [6486, [6528]*2]*3]*2, 6486, 6528, [6486,
 [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2,
 6486, 6528, 6486, 356, [[2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448,
 [2406]*3]*3]*3, 2448]*2, [2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448,
 [2406]*3]*3]*3, [2448, [2406]*4, [2448, [2406]*3]*2]*2, 2451, 4806, [4848,
 [4806]*2, [4848, 4806]*7, 4848, [4806]*2, [4848, 4806]*6]*3, 4848, [4806]*2,
 [4848, 4806]*2, 3962, [2166]*3, [2208, [2166]*4]*2, [2208, [2166]*3, [2208,
 [2166]*4]*3]*5, 2208, [2166]*3, [2208, [2166]*4]*2, [2208, [2166]*3, [2208,
 [2166]*4]*3]*6, 2208, [2166]*3, 2211, [4326]*2, [4368, 4326]*2, [4368,
 [4326]*2, 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*2]*2, 4368, [4326]*2,
 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*3, [4368, [4326]*2, 4368, 4326,
 [4368, [4326]*2, [4368, 4326]*2]*2]*2, 4368, [4326]*2, 4368, 4326, 4368,
 [4326]*2, 4002, [3646, [3688, [3646]*2]*4, 3688]*2, [3646, [3688, [3646]*2]*5,
 [3688, 3646, [3688, [3646]*2]*4]*2, 3688]*2, 3646, [3688, [3646]*2]*5, 3688,
 3646, [3688, [3646]*2]*2, 3691, 7286, [7328]*3, 7286, [7328]*2, 7286,
 [7328]*3, [7286, [7328]*2]*2, [7286, [7328]*3, 7286, [7328]*2]*5, 7286,
 [7328]*3, [7286, [7328]*2]*2, 7286, [7328]*3, 7286, 7328, 7562, [2566]*2,
 [2608, [2566]*3]*50, 2611, 2566, [5126, 5168]*48, 5126, 4922, [2166]*3, [2208,
 [2166]*4]*2, [2208, [2166]*3, [2208, [2166]*4]*3]*5, 2208, [2166]*3, [2208,
 [2166]*4]*2, [2208, [2166]*3, [2208, [2166]*4]*3]*6, 2208, [2166]*3, 2211,
 [4326]*2, [4368, 4326]*2, [4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368,
 4326]*2]*2]*2, 4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*3,
 [4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*2]*2, 4368,
 [4326]*2, 4368, 4326, 4368, [4326]*2, 4442, [4086, 4128, [4086]*2, 4128]*25,
 4086, 4131, 4086, 8208, [8166, [8208]*4]*11, 8166, [8208]*3, 8276, [[3246]*3,
 [3288, [3246]*2]*5, 3288]*4, [3246]*3, [3288, [3246]*2]*6, [3288, [3246]*3,
 [3288, [3246]*2]*5]*3, 3288, [3246]*3, 3288, [3246]*2, 3291, [6486,
 [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2,
 [6486, 6528, [6486, [6528]*2]*3]*2, 6486, 6528, [6486, [6528]*2]*2, 6486,
 6528, [6486, [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, 6486,
 356, [[2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3,
 2448]*2, [2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3,
 [2448, [2406]*4, [2448, [2406]*3]*2]*2, 2451, 4806, [4848, [4806]*2, [4848,
 4806]*7, 4848, [4806]*2, [4848, 4806]*6]*3, 4848, [4806]*2, [4848, 4806]*2,
 5042, [[3246]*2, 3288]*6, [[3246]*3, [3288, [3246]*2]*5, 3288]*3, [3246]*3,
 [3288, [3246]*2]*6, [3288, [3246]*3, [3288, [3246]*2]*5]*3, 3288, [3246]*3,
 3288, [3246]*2, 3291, [6486, [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3,
 6486, 6528, [6486, [6528]*2]*2, [6486, 6528, [6486, [6528]*2]*3]*2, 6486,
 6528, [6486, [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3, 6486, 6528, [6486,
 [6528]*2]*2, 6486, 6528, 6486, 356, [[2406]*4, [2448, [2406]*3]*2, [2448,
 [2406]*4, [2448, [2406]*3]*3]*3, 2448]*2, [2406]*4, [2448, [2406]*3]*2, [2448,
 [2406]*4, [2448, [2406]*3]*3]*3, [2448, [2406]*4, [2448, [2406]*3]*2]*2, 2451,
 4806, [4848, [4806]*2, [4848, 4806]*7, 4848, [4806]*2, [4848, 4806]*6]*3,
 4848, [4806]*2, [4848, 4806]*2, 3842, [[2046]*4, 2088]*50, [2046]*4, 2091,
 2046, [[4086]*2, 4128, 4086, 4128]*24, [4086]*2, 2156, [[3246]*3, [3288,
 [3246]*2]*5, 3288]*4, [3246]*3, [3288, [3246]*2]*6, [3288, [3246]*3, [3288,
 [3246]*2]*5]*3, 3288, [3246]*3, 3288, [3246]*2, 3291, [6486, [6528]*2]*2,
 6486, 6528, [6486, [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, [6486, 6528,
 [6486, [6528]*2]*3]*2, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, [6486,
 [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, 6486, 356, [[2406]*4,
 [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3, 2448]*2, [2406]*4,
 [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3, [2448, [2406]*4,
 [2448, [2406]*3]*2]*2, 2451, 4806, [4848, [4806]*2, [4848, 4806]*7, 4848,
 [4806]*2, [4848, 4806]*6]*3, 4848, [4806]*2, [4848, 4806]*2, 3842, [[2046]*4,
 2088]*50, [2046]*4, 2091, 2046, [[4086]*2, 4128, 4086, 4128]*24, [4086]*2,
 2156, [[1606]*6, 1648, [1606]*5, 1648, [1606]*6, [1648, [1606]*5]*2, 1648]*10,
 [1606]*6, 1651, [3206]*2, [3248, [3206]*3, [3248, [3206]*2]*4]*9, 3248,
 [3206]*3, [3248, [3206]*2]*2, 1796, [[2406]*4, [2448, [2406]*3]*2, [2448,
 [2406]*4, [2448, [2406]*3]*3]*3, 2448]*2, [2406]*4, [2448, [2406]*3]*2, [2448,
 [2406]*4, [2448, [2406]*3]*3]*3, [2448, [2406]*4, [2448, [2406]*3]*2]*2, 2451,
 4806, [4848, [4806]*2, [4848, 4806]*7, 4848, [4806]*2, [4848, 4806]*6]*3,
 4848, [4806]*2, [4848, 4806]*2, 3402, [[1606]*5, 1648]*2, [[1606]*6, [1648,
 [1606]*5]*2, 1648, [1606]*6, 1648, [1606]*5, 1648]*9, [1606]*6, [1648,
 [1606]*5]*2, 1648, [1606]*6, 1651, [3206]*2, [3248, [3206]*3, [3248,
 [3206]*2]*4]*9, 3248, [3206]*3, [3248, [3206]*2]*2, 1796, [[1606]*6, 1648,
 [1606]*5, 1648, [1606]*6, [1648, [1606]*5]*2, 1648]*10, [1606]*6, 1651,
 [3206]*2, [3248, [3206]*3, [3248, [3206]*2]*4]*9, 3248, [3206]*3, [3248,
 [3206]*2]*2, 1796, [[[2166]*4, 2208]*3, [[2166]*3, [2208, [2166]*4]*3,
 2208]*5, [2166]*3, [2208, [2166]*4]*2, [2208, [2166]*3, [2208, [2166]*4]*3]*6,
 2208, [2166]*3, 2211, [4326]*2, [4368, 4326]*2, [4368, [4326]*2, 4368, 4326,
 [4368, [4326]*2, [4368, 4326]*2]*2]*2, 4368, [4326]*2, 4368, 4326, [4368,
 [4326]*2, [4368, 4326]*2]*3, [4368, [4326]*2, 4368, 4326, [4368, [4326]*2,
 [4368, 4326]*2]*2]*2, 4368, [4326]*2, 4368, 4326, 4368, [4326]*2, 2162,
 [[1806]*4, [1848, [1806]*5]*2, 1848]*4, [[1806]*4, [1848, [1806]*5]*3, [1848,
 [1806]*4, [1848, [1806]*5]*2]*4, 1848]*2, [1806]*4, [1848, [1806]*5]*3, 1848,
 [1806]*4, [1848, [1806]*5]*2, 1851, [[3606]*2, 3648]*3, 3606, [3648,
 [3606]*2]*6, [3648, 3606, [3648, [3606]*2]*5]*2, [3648, 3606, [3648,
 [3606]*2]*6, 3648, 3606, [3648, [3606]*2]*5]*2, 3648, 3606, 3596, [[3246]*3,
 [3288, [3246]*2]*5, 3288]*4, [3246]*3, [3288, [3246]*2]*6, [3288, [3246]*3,
 [3288, [3246]*2]*5]*3, 3288, [3246]*3, 3288, [3246]*2, 3291, [6486,
 [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2,
 [6486, 6528, [6486, [6528]*2]*3]*2, 6486, 6528, [6486, [6528]*2]*2, 6486,
 6528, [6486, [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, 6486,
 356]*2, [[2166]*4, 2208]*3, [[2166]*3, [2208, [2166]*4]*3, 2208]*5, [2166]*3,
 [2208, [2166]*4]*2, [2208, [2166]*3, [2208, [2166]*4]*3]*6, 2208, [2166]*3,
 2211, [4326]*2, [4368, 4326]*2, [4368, [4326]*2, 4368, 4326, [4368, [4326]*2,
 [4368, 4326]*2]*2]*2, 4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368,
 4326]*2]*3, [4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368,
 4326]*2]*2]*2, 4368, [4326]*2, 4368, 4326, 4368, [4326]*2, 2162, [[1806]*4,
 [1848, [1806]*5]*2, 1848]*4, [[1806]*4, [1848, [1806]*5]*3, [1848, [1806]*4,
 [1848, [1806]*5]*2]*4, 1848]*2, [1806]*4, [1848, [1806]*5]*3, 1848, [1806]*4,
 [1848, [1806]*5]*2, 1851, [[3606]*2, 3648]*3, 3606, [3648, [3606]*2]*6, [3648,
 3606, [3648, [3606]*2]*5]*2, [3648, 3606, [3648, [3606]*2]*6, 3648, 3606,
 [3648, [3606]*2]*5]*2, 3648, 3606, 3596, [[1606]*6, 1648, [1606]*5, 1648,
 [1606]*6, [1648, [1606]*5]*2, 1648]*10, [1606]*6, 1651, [3206]*2, [3248,
 [3206]*3, [3248, [3206]*2]*4]*9, 3248, [3206]*3, [3248, [3206]*2]*2, 1796,
 [[2166]*4, 2208]*3, [[2166]*3, [2208, [2166]*4]*3, 2208]*5, [2166]*3, [2208,
 [2166]*4]*2, [2208, [2166]*3, [2208, [2166]*4]*3]*6, 2208, [2166]*3, 2211,
 [4326]*2, [4368, 4326]*2, [4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368,
 4326]*2]*2]*2, 4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*3,
 [4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*2]*2, 4368,
 [4326]*2, 4368, 4326, 4368, [4326]*2, 1962, [[1606]*5, 1648]*2, [[1606]*6,
 [1648, [1606]*5]*2, 1648, [1606]*6, 1648, [1606]*5, 1648]*9, [1606]*6, [1648,
 [1606]*5]*2, 1648, [1606]*6, 1651, [3206]*2, [3248, [3206]*3, [3248,
 [3206]*2]*4]*9, 3248, [3206]*3, [3248, [3206]*2]*2, 1796, [[1606]*6, 1648,
 [1606]*5, 1648, [1606]*6, [1648, [1606]*5]*2, 1648]*10, [1606]*6, 1651,
 [3206]*2, [3248, [3206]*3, [3248, [3206]*2]*4]*9, 3248, [3206]*3, [3248,
 [3206]*2]*2, 1796, [[2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448,
 [2406]*3]*3]*3, 2448]*2, [2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448,
 [2406]*3]*3]*3, [2448, [2406]*4, [2448, [2406]*3]*2]*2, 2451, 4806, [4848,
 [4806]*2, [4848, 4806]*7, 4848, [4806]*2, [4848, 4806]*6]*3, 4848, [4806]*2,
 [4848, 4806]*2, 3842, [[2046]*4, 2088]*50, [2046]*4, 2091, 2046, [[4086]*2,
 4128, 4086, 4128]*24, [4086]*2, 2156, [[3246]*3, [3288, [3246]*2]*5, 3288]*4,
 [3246]*3, [3288, [3246]*2]*6, [3288, [3246]*3, [3288, [3246]*2]*5]*3, 3288,
 [3246]*3, 3288, [3246]*2, 3291, [6486, [6528]*2]*2, 6486, 6528, [6486,
 [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, [6486, 6528, [6486,
 [6528]*2]*3]*2, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, [6486,
 [6528]*2]*3, 6486, 6528, [6486, [6528]*2]*2, 6486, 6528, 6486, 356, [[2406]*4,
 [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3, 2448]*2, [2406]*4,
 [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3, [2448, [2406]*4,
 [2448, [2406]*3]*2]*2, 2451, 4806, [4848, [4806]*2, [4848, 4806]*7, 4848,
 [4806]*2, [4848, 4806]*6]*3, 4848, [4806]*2, [4848, 4806]*2, 3842, [[2046]*4,
 2088]*50, [2046]*4, 2091, 2046, [[4086]*2, 4128, 4086, 4128]*24, [4086]*2,
 2156, [[1526]*6, 1568]*3, [[1526]*5, [1568, [1526]*6]*3, 1568]*3, [1526]*5,
 [1568, [1526]*6]*2, [1568, [1526]*5, [1568, [1526]*6]*3]*4, 1568, [1526]*5,
 [1568, [1526]*6]*2, [1568, [1526]*5, [1568, [1526]*6]*3]*3, 1568, [1526]*5,
 1568, [1526]*6, 1571, [[3046]*3, [3088, [3046]*2]*2, 3088]*2, [[3046]*3, 3088,
 [3046]*2, [3088, [3046]*3, [3088, [3046]*2]*2]*2, 3088, [3046]*3, 3088,
 [3046]*2, [3088, [3046]*3, [3088, [3046]*2]*2]*3, 3088]*2, [3046]*3, 3088,
 [3046]*2, 3088, [3046]*3, [3088, [3046]*2]*2, 5162, [[2406]*3, 2448]*3,
 [[2406]*4, [2448, [2406]*3]*3, 2448]*3, [2406]*4, [2448, [2406]*3]*2, [2448,
 [2406]*4, [2448, [2406]*3]*3]*3, 2448, [2406]*4, [2448, [2406]*3]*2, [2448,
 [2406]*4, [2448, [2406]*3]*3]*3, [2448, [2406]*4, [2448, [2406]*3]*2]*2, 2451,
 4806, [4848, [4806]*2, [4848, 4806]*7, 4848, [4806]*2, [4848, 4806]*6]*3,
 4848, [4806]*2, [4848, 4806]*2, 3602, [[1806]*4, [1848, [1806]*5]*2, 1848]*4,
 [[1806]*4, [1848, [1806]*5]*3, [1848, [1806]*4, [1848, [1806]*5]*2]*4,
 1848]*2, [1806]*4, [1848, [1806]*5]*3, 1848, [1806]*4, [1848, [1806]*5]*2,
 1851, [[3606]*2, 3648]*3, 3606, [3648, [3606]*2]*6, [3648, 3606, [3648,
 [3606]*2]*5]*2, [3648, 3606, [3648, [3606]*2]*6, 3648, 3606, [3648,
 [3606]*2]*5]*2, 3648, 3606, 3596, [[3046]*3, 3088, [3046]*2, [3088, [3046]*3,
 [3088, [3046]*2]*2]*2, 3088, [3046]*3, 3088, [3046]*2, [3088, [3046]*3, [3088,
 [3046]*2]*2]*3, 3088]*2, [3046]*3, 3088, [3046]*2, [3088, [3046]*3, [3088,
 [3046]*2]*2]*2, 3088, [3046]*3, 3088, [3046]*2, 3088, [3046]*3, [3088,
 [3046]*2]*2, 3091, [6086, 6128, 6086, [6128]*2]*2, [[6086, 6128]*2, [6086,
 [6128]*2, 6086, 6128]*5, 6086, [6128]*2]*2, [6086, 6128]*2, 6086, [6128]*2,
 6086, 5162, [[2406]*3, 2448]*3, [[2406]*4, [2448, [2406]*3]*3, 2448]*3,
 [2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3, 2448,
 [2406]*4, [2448, [2406]*3]*2, [2448, [2406]*4, [2448, [2406]*3]*3]*3, [2448,
 [2406]*4, [2448, [2406]*3]*2]*2, 2451, 4806, [4848, [4806]*2, [4848, 4806]*7,
 4848, [4806]*2, [4848, 4806]*6]*3, 4848, [4806]*2, [4848, 4806]*2, 3602,
 [[1806]*4, [1848, [1806]*5]*2, 1848]*4, [[1806]*4, [1848, [1806]*5]*3, [1848,
 [1806]*4, [1848, [1806]*5]*2]*4, 1848]*2, [1806]*4, [1848, [1806]*5]*3, 1848,
 [1806]*4, [1848, [1806]*5]*2, 1851, [[3606]*2, 3648]*3, 3606, [3648,
 [3606]*2]*6, [3648, 3606, [3648, [3606]*2]*5]*2, [3648, 3606, [3648,
 [3606]*2]*6, 3648, 3606, [3648, [3606]*2]*5]*2, 3648, 3606, 3596, [[1606]*6,
 1648, [1606]*5, 1648, [1606]*6, [1648, [1606]*5]*2, 1648]*10, [1606]*6, 1651,
 [3206]*2, [3248, [3206]*3, [3248, [3206]*2]*4]*9, 3248, [3206]*3, [3248,
 [3206]*2]*2, 1796, [[2566]*3, 2608]*50, [2566]*3, 2611, 2566, [5126, 5168]*48,
 5126, 4802, [[2046]*4, 2088]*50, [2046]*4, 2091, 2046, [[4086]*2, 4128, 4086,
 4128]*24, [4086]*2, 2156, [[3246]*3, [3288, [3246]*2]*5, 3288]*4, [3246]*3,
 [3288, [3246]*2]*6, [3288, [3246]*3, [3288, [3246]*2]*5]*3, 3288, [3246]*3,
 3288, [3246]*2, 3291, [6486, [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3,
 6486, 6528, [6486, [6528]*2]*2, [6486, 6528, [6486, [6528]*2]*3]*2, 6486,
 6528, [6486, [6528]*2]*2, 6486, 6528, [6486, [6528]*2]*3, 6486, 6528, [6486,
 [6528]*2]*2, 6486, 6528, 6486, 356, [[2566]*3, 2608]*50, [2566]*3, 2611, 2566,
 [5126, 5168]*48, 5126, 4802, [[2046]*4, 2088]*50, [2046]*4, 2091, 2046,
 [[4086]*2, 4128, 4086, 4128]*24, [4086]*2, 2156, [[1806]*5, 1848]*3,
 [[1806]*4, [1848, [1806]*5]*2, 1848]*3, [[1806]*4, [1848, [1806]*5]*3, [1848,
 [1806]*4, [1848, [1806]*5]*2]*4, 1848]*2, [1806]*4, [1848, [1806]*5]*3, 1848,
 [1806]*4, [1848, [1806]*5]*2, 1851, [[3606]*2, 3648]*3, 3606, [3648,
 [3606]*2]*6, [3648, 3606, [3648, [3606]*2]*5]*2, [3648, 3606, [3648,
 [3606]*2]*6, 3648, 3606, [3648, [3606]*2]*5]*2, 3648, 3606, 3596, [[2566]*3,
 2608]*50, [2566]*3, 2611, 2566, [5126, 5168]*48, 5126, 4922, [2166]*3, [2208,
 [2166]*4]*2, [2208, [2166]*3, [2208, [2166]*4]*3]*5, 2208, [2166]*3, [2208,
 [2166]*4]*2, [2208, [2166]*3, [2208, [2166]*4]*3]*6, 2208, [2166]*3, 2211,
 [4326]*2, [4368, 4326]*2, [4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368,
 4326]*2]*2]*2, 4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*3,
 [4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*2]*2, 4368,
 [4326]*2, 4368, 4326, 4368, [4326]*2, 1642, [1286]*6, [1328, [1286]*7]*50,
 1331, 1286, [[2566]*3, 2608]*48, [2566]*3, 4042, [2566]*2, [2608,
 [2566]*3]*50, 2611, 2566, [5126, 5168]*48, 5126, 4922, [2166]*3, [2208,
 [2166]*4]*2, [2208, [2166]*3, [2208, [2166]*4]*3]*5, 2208, [2166]*3, [2208,
 [2166]*4]*2, [2208, [2166]*3, [2208, [2166]*4]*3]*6, 2208, [2166]*3, 2211,
 [4326]*2, [4368, 4326]*2, [4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368,
 4326]*2]*2]*2, 4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*3,
 [4368, [4326]*2, 4368, 4326, [4368, [4326]*2, [4368, 4326]*2]*2]*2, 4368,
 [4326]*2, 4368, 4326, 4368, [4326]*2, 2802, [[2446]*3, 2488]*5, [[2446]*4,
 [2488, [2446]*3]*4, 2488]*9, [2446]*4, 2491, [4886, 4928]*4, [4886]*2, [4928,
 4886]*10, [4928, [4886]*2, [4928, 4886]*9]*3, 4928, [4886]*2, [4928, 4886]*3,
 1836, [4846]*2, [4888, 4846]*7, 4888, [4846]*2, [4888, 4846]*8, 4888,
 [4846]*2, [4888, 4846]*7, [4888, [4846]*2, [4888, 4846]*8]*2, 4888, [4846]*2,
 [4888, 4846]*7, 4891, 9686, [9728]*18, 9686, [9728]*17, 9686, [9728]*13, 7796,
 [[2446]*4, [2488, [2446]*3]*4, 2488]*10, [2446]*4, 2491, [4886, 4928]*4,
 [4886]*2, [4928, 4886]*10, [4928, [4886]*2, [4928, 4886]*9]*3, 4928, [4886]*2,
 [4928, 4886]*3

[InGameTune]
 [3446, [3457, [3446]*2]*2, 290000]*2, 3846, 3857, [3846]*2, 3857, 3846,
 290000, [[3846]*2, 3857]*2, 3846, 290000, [[3446]*2, 3457]*2, [3446]*2,
 290000, 3446, [3457, [3446]*2]*2, 290000, 3846, 3857, [3846]*2, 3857, 3846,
 290000, [[3846]*2, 3857]*2, 3846, [290000, [[4086]*2, 4097]*2, 4086]*4,
 [290000, [5126, 5137]*2, 5126]*8, [290000, [[4086]*2, 4097]*2, 4086]*2,
 [290000, [[3846]*2, 3857]*2, 3846]*2, [290000, [[3446]*2, 3457]*2, [3446]*2,
 290000, 3446, [3457, [3446]*2]*2, 290000, 3846, 3857, [3846]*2, 3857, 3846,
 290000, [[3846]*2, 3857]*2, 3846]*2, [290000, [[4086]*2, 4097]*2, 4086]*2,
 [290000, [[3846]*2, 3857]*2, 3846]*2, 290000, [[3446]*2, 3457]*2, [3446]*2,
 290000, 3446, [3457, [3446]*2]*2, [290000, [[3046]*2, 3057]*2, [3046]*3]*2,
 [290000, [2886]*2, 2897, [2886]*3, 2897, [2886]*2]*2, [290000, [[3046]*2,
 3057]*2, [3046]*3]*2, [290000, [2886]*2, 2897, [2886]*3, 2897, [2886]*2]*2,
 [290000, [[3046]*2, 3057]*2, [3046]*3]*2, [290000, 3446, [3457,
 [3446]*2]*2]*16, 290000, [2566]*2, [2577, [2566]*3]*2, [290000, [[2566]*3,
 2577]*2, [2566]*3]*7, [290000, [[2726]*3, 2737]*2, [2726]*3]*4, 290000,
 [3046]*3, 3057, [3046]*2, 3057, [[3046]*3, 290000, [[3046]*2, 3057]*2]*3,
 [3046]*3, [290000, 3446, [3457, [3446]*2]*2]*2, 290000, 3846, 3857, [3846]*2,
 3857, 3846, 290000, [[3846]*2, 3857]*2, 3846, [290000, [[4086]*2, 4097]*2,
 4086]*2, [290000, [[3846]*2, 3857]*2, 3846]*2, 290000, [[3446]*2, 3457]*2,
 [3446]*2, [290000, 3446, [3457, [3446]*2]*2]*3, 290000, 4086, 4097, [4086]*2,
 4097, [4086, 290000, [[4086]*2, 4097]*2]*3, 4086, [290000, [3246]*3, [3257,
 [3246]*2]*2]*2, 290000, [[3446]*2, 3457]*2, [3446]*2, 290000, 3446, [3457,
 [3446]*2]*2, 290000, 3846, 3857, [3846]*2, 3857, 3846, 290000, [[3846]*2,
 3857]*2, 3846, 290000, [[3446]*2, 3457]*2, [3446]*2, 290000, 3446, [3457,
 [3446]*2]*2, 290000, [[3246]*2, 3257]*2, [3246]*2, [290000, [3246]*3, [3257,
 [3246]*2]*2]*3, [290000, [[3846]*2, 3857]*2, 3846]*4, [290000, [[2566]*3,
 2577]*2, [2566]*3]*16
